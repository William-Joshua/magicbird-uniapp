{"version":3,"sources":["uni-app.cjs.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar vue = require('vue');\nvar shared = require('@vue/shared');\nvar uniShared = require('@dcloudio/uni-shared');\n\nfunction assertKey(key, shallow = false) {\r\n    if (!key) {\r\n        throw new Error(`${shallow ? 'shallowSsrRef' : 'ssrRef'}: You must provide a key.`);\r\n    }\r\n}\r\nfunction proxy$1(target, track, trigger) {\r\n    return new Proxy(target, {\r\n        get(target, prop) {\r\n            track();\r\n            if (shared.isObject(target[prop])) {\r\n                return proxy$1(target[prop], track, trigger);\r\n            }\r\n            return Reflect.get(target, prop);\r\n        },\r\n        set(obj, prop, newVal) {\r\n            const result = Reflect.set(obj, prop, newVal);\r\n            trigger();\r\n            return result;\r\n        },\r\n    });\r\n}\r\nconst globalData = {};\r\nconst ssrServerRef = (value, key, shallow = false) => {\r\n    assertKey(key, shallow);\r\n    const ctx = vue.getCurrentInstance() && vue.useSSRContext();\r\n    let state;\r\n    if (ctx) {\r\n        const __uniSSR = ctx[uniShared.UNI_SSR] || (ctx[uniShared.UNI_SSR] = {});\r\n        state = __uniSSR[uniShared.UNI_SSR_DATA] || (__uniSSR[uniShared.UNI_SSR_DATA] = {});\r\n    }\r\n    else {\r\n        state = globalData;\r\n    }\r\n    state[key] = uniShared.sanitise(value);\r\n    // SSR 模式下 watchEffect 不生效 https://github.com/vuejs/vue-next/blob/master/packages/runtime-core/src/apiWatch.ts#L283\r\n    // 故自定义ref\r\n    return vue.customRef((track, trigger) => {\r\n        const customTrigger = () => (trigger(), (state[key] = uniShared.sanitise(value)));\r\n        return {\r\n            get: () => {\r\n                track();\r\n                if (!shallow && shared.isObject(value)) {\r\n                    return proxy$1(value, track, customTrigger);\r\n                }\r\n                return value;\r\n            },\r\n            set: (v) => {\r\n                value = v;\r\n                customTrigger();\r\n            },\r\n        };\r\n    });\r\n};\r\nconst ssrRef = (value, key) => {\r\n    {\r\n        return ssrServerRef(value, key);\r\n    }\r\n};\r\nconst shallowSsrRef = (value, key) => {\r\n    {\r\n        return ssrServerRef(value, key, true);\r\n    }\r\n};\r\nfunction getSsrGlobalData() {\r\n    return uniShared.sanitise(globalData);\r\n}\n\n/**\r\n * uni 对象是跨实例的，而此处列的 API 均是需要跟当前实例关联的，比如 requireNativePlugin 获取 dom 时，依赖当前 weex 实例\r\n */\r\nfunction getCurrentSubNVue() {\r\n    // @ts-ignore\r\n    return uni.getSubNVueById(plus.webview.currentWebview().id);\r\n}\r\nfunction requireNativePlugin(name) {\r\n    return weex.requireModule(name);\r\n}\n\nfunction resolveEasycom(component, easycom) {\r\n    return shared.isString(component) ? easycom : component;\r\n}\n\n// @ts-ignore\r\nconst createHook = (lifecycle) => (hook, target = vue.getCurrentInstance()) => {\r\n    // post-create lifecycle registrations are noops during SSR\r\n    !vue.isInSSRComponentSetup && vue.injectHook(lifecycle, hook, target);\r\n};\r\nconst onShow = /*#__PURE__*/ createHook(uniShared.ON_SHOW);\r\nconst onHide = /*#__PURE__*/ createHook(uniShared.ON_HIDE);\r\nconst onLaunch = /*#__PURE__*/ createHook(uniShared.ON_LAUNCH);\r\nconst onError = /*#__PURE__*/ createHook(uniShared.ON_ERROR);\r\nconst onThemeChange = \r\n/*#__PURE__*/ createHook(uniShared.ON_THEME_CHANGE);\r\nconst onPageNotFound = \r\n/*#__PURE__*/ createHook(uniShared.ON_PAGE_NOT_FOUND);\r\nconst onUnhandledRejection = \r\n/*#__PURE__*/ createHook(uniShared.ON_UNHANDLE_REJECTION);\r\nconst onInit = /*#__PURE__*/ createHook(uniShared.ON_INIT);\r\n// 小程序如果想在 setup 的 props 传递页面参数，需要定义 props，故同时暴露 onLoad 吧\r\nconst onLoad = /*#__PURE__*/ createHook(uniShared.ON_LOAD);\r\nconst onReady = /*#__PURE__*/ createHook(uniShared.ON_READY);\r\nconst onUnload = /*#__PURE__*/ createHook(uniShared.ON_UNLOAD);\r\nconst onResize = /*#__PURE__*/ createHook(uniShared.ON_RESIZE);\r\nconst onBackPress = \r\n/*#__PURE__*/ createHook(uniShared.ON_BACK_PRESS);\r\nconst onPageScroll = \r\n/*#__PURE__*/ createHook(uniShared.ON_PAGE_SCROLL);\r\nconst onTabItemTap = \r\n/*#__PURE__*/ createHook(uniShared.ON_TAB_ITEM_TAP);\r\nconst onReachBottom = /*#__PURE__*/ createHook(uniShared.ON_REACH_BOTTOM);\r\nconst onPullDownRefresh = /*#__PURE__*/ createHook(uniShared.ON_PULL_DOWN_REFRESH);\r\nconst onSaveExitState = \r\n/*#__PURE__*/ createHook(uniShared.ON_SAVE_EXIT_STATE);\r\nconst onShareTimeline = \r\n/*#__PURE__*/ createHook(uniShared.ON_SHARE_TIMELINE);\r\nconst onAddToFavorites = \r\n/*#__PURE__*/ createHook(uniShared.ON_ADD_TO_FAVORITES);\r\nconst onShareAppMessage = \r\n/*#__PURE__*/ createHook(uniShared.ON_SHARE_APP_MESSAGE);\r\nconst onNavigationBarButtonTap = \r\n/*#__PURE__*/ createHook(uniShared.ON_NAVIGATION_BAR_BUTTON_TAP);\r\nconst onNavigationBarSearchInputChanged = \r\n/*#__PURE__*/ createHook(uniShared.ON_NAVIGATION_BAR_SEARCH_INPUT_CHANGED);\r\nconst onNavigationBarSearchInputClicked = /*#__PURE__*/ createHook(uniShared.ON_NAVIGATION_BAR_SEARCH_INPUT_CLICKED);\r\nconst onNavigationBarSearchInputConfirmed = \r\n/*#__PURE__*/ createHook(uniShared.ON_NAVIGATION_BAR_SEARCH_INPUT_CONFIRMED);\r\nconst onNavigationBarSearchInputFocusChanged = \r\n/*#__PURE__*/ createHook(uniShared.ON_NAVIGATION_BAR_SEARCH_INPUT_FOCUS_CHANGED);\n\nlet callbackId = 1;\r\nlet proxy;\r\nconst callbacks = {};\r\nfunction normalizeArg(arg) {\r\n    if (typeof arg === 'function') {\r\n        const id = callbackId++;\r\n        callbacks[id] = arg;\r\n        return id;\r\n    }\r\n    else if (shared.isPlainObject(arg)) {\r\n        Object.keys(arg).forEach((name) => {\r\n            arg[name] = normalizeArg(arg[name]);\r\n        });\r\n    }\r\n    return arg;\r\n}\r\nfunction initUtsInstanceMethod(async, opts) {\r\n    return initProxyFunction(async, opts);\r\n}\r\nfunction getProxy() {\r\n    if (!proxy) {\r\n        proxy = uni.requireNativePlugin('UTS-Proxy');\r\n    }\r\n    return proxy;\r\n}\r\nfunction resolveSyncResult(res) {\r\n    if (res.errMsg) {\r\n        throw new Error(res.errMsg);\r\n    }\r\n    return res.params;\r\n}\r\nfunction invokePropGetter(args) {\r\n    return resolveSyncResult(getProxy().invokeSync(args, () => { }));\r\n}\r\nfunction initProxyFunction(async, { package: pkg, class: cls, name: propOrMethod, id: instanceId, }) {\r\n    const invokeCallback = ({ id, name, params, keepAlive, }) => {\r\n        const callback = callbacks[id];\r\n        if (callback) {\r\n            callback(...params);\r\n            if (!keepAlive) {\r\n                delete callbacks[id];\r\n            }\r\n        }\r\n        else {\r\n            console.error(`${pkg}${cls}.${propOrMethod} ${name} is not found`);\r\n        }\r\n    };\r\n    const baseArgs = instanceId\r\n        ? { id: instanceId, name: propOrMethod }\r\n        : {\r\n            package: pkg,\r\n            class: cls,\r\n            name: propOrMethod,\r\n        };\r\n    return (...args) => {\r\n        const invokeArgs = shared.extend({}, baseArgs, {\r\n            params: args.map((arg) => normalizeArg(arg)),\r\n        });\r\n        if (async) {\r\n            return new Promise((resolve, reject) => {\r\n                getProxy().invokeAsync(invokeArgs, (res) => {\r\n                    if (res.type !== 'return') {\r\n                        invokeCallback(res);\r\n                    }\r\n                    else {\r\n                        if (res.errMsg) {\r\n                            reject(res.errMsg);\r\n                        }\r\n                        else {\r\n                            resolve(res.params);\r\n                        }\r\n                    }\r\n                });\r\n            });\r\n        }\r\n        return resolveSyncResult(getProxy().invokeSync(invokeArgs, invokeCallback));\r\n    };\r\n}\r\nfunction initUtsStaticMethod(async, opts) {\r\n    return initProxyFunction(async, opts);\r\n}\r\nconst initUtsProxyFunction = initUtsStaticMethod;\r\nfunction initUtsProxyClass({ package: pkg, class: cls, methods, props, staticProps, staticMethods, }) {\r\n    const baseOptions = {\r\n        package: pkg,\r\n        class: cls,\r\n    };\r\n    return class ProxyClass {\r\n        constructor(...params) {\r\n            const target = {};\r\n            // 初始化实例 ID\r\n            const instanceId = initProxyFunction(false, shared.extend({ name: 'constructor', params }, baseOptions)).apply(null, params);\r\n            return new Proxy(this, {\r\n                get(_, name) {\r\n                    if (!target[name]) {\r\n                        //实例方法\r\n                        if (shared.hasOwn(methods, name)) {\r\n                            target[name] = initUtsInstanceMethod(!!methods[name].async, shared.extend({\r\n                                id: instanceId,\r\n                                name,\r\n                            }, baseOptions));\r\n                        }\r\n                        else if (shared.hasOwn(staticMethods, name)) {\r\n                            // 静态方法\r\n                            target[name] = initUtsStaticMethod(!!staticMethods[name].async, shared.extend({ name, companion: true }, baseOptions));\r\n                        }\r\n                        else if (props.includes(name)) {\r\n                            // 实例属性\r\n                            return invokePropGetter({ id: instanceId, name: name });\r\n                        }\r\n                        else if (staticProps.includes(name)) {\r\n                            // 静态属性\r\n                            return invokePropGetter(shared.extend({ name: name, companion: true }, baseOptions));\r\n                        }\r\n                    }\r\n                    return target[name];\r\n                },\r\n            });\r\n        }\r\n    };\r\n}\n\nexports.getCurrentSubNVue = getCurrentSubNVue;\nexports.getSsrGlobalData = getSsrGlobalData;\nexports.initUtsProxyClass = initUtsProxyClass;\nexports.initUtsProxyFunction = initUtsProxyFunction;\nexports.onAddToFavorites = onAddToFavorites;\nexports.onBackPress = onBackPress;\nexports.onError = onError;\nexports.onHide = onHide;\nexports.onInit = onInit;\nexports.onLaunch = onLaunch;\nexports.onLoad = onLoad;\nexports.onNavigationBarButtonTap = onNavigationBarButtonTap;\nexports.onNavigationBarSearchInputChanged = onNavigationBarSearchInputChanged;\nexports.onNavigationBarSearchInputClicked = onNavigationBarSearchInputClicked;\nexports.onNavigationBarSearchInputConfirmed = onNavigationBarSearchInputConfirmed;\nexports.onNavigationBarSearchInputFocusChanged = onNavigationBarSearchInputFocusChanged;\nexports.onPageNotFound = onPageNotFound;\nexports.onPageScroll = onPageScroll;\nexports.onPullDownRefresh = onPullDownRefresh;\nexports.onReachBottom = onReachBottom;\nexports.onReady = onReady;\nexports.onResize = onResize;\nexports.onSaveExitState = onSaveExitState;\nexports.onShareAppMessage = onShareAppMessage;\nexports.onShareTimeline = onShareTimeline;\nexports.onShow = onShow;\nexports.onTabItemTap = onTabItemTap;\nexports.onThemeChange = onThemeChange;\nexports.onUnhandledRejection = onUnhandledRejection;\nexports.onUnload = onUnload;\nexports.requireNativePlugin = requireNativePlugin;\nexports.resolveEasycom = resolveEasycom;\nexports.shallowSsrRef = shallowSsrRef;\nexports.ssrRef = ssrRef;\n"]}